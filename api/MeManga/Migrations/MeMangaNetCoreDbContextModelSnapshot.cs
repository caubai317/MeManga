// <auto-generated />
using System;
using MeManga.Core.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MeManga.Migrations
{
    [DbContext(typeof(MeMangaNetCoreDbContext))]
    partial class MeMangaNetCoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MeManga.Core.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Avatar");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(512);

                    b.Property<string>("Overall");

                    b.Property<bool>("RecordActive");

                    b.Property<bool>("RecordDeleted");

                    b.Property<int>("RecordOrder");

                    b.Property<Guid?>("TranslatorId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<Guid?>("WriterId");

                    b.HasKey("Id");

                    b.HasIndex("TranslatorId");

                    b.HasIndex("WriterId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("MeManga.Core.Entities.BookInType", b =>
                {
                    b.Property<Guid>("BookId");

                    b.Property<Guid>("TypeBookId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<Guid>("Id");

                    b.Property<bool>("RecordActive");

                    b.Property<bool>("RecordDeleted");

                    b.Property<int>("RecordOrder");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<Guid?>("UserId");

                    b.HasKey("BookId", "TypeBookId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("TypeBookId");

                    b.HasIndex("UserId");

                    b.ToTable("BookInType");
                });

            modelBuilder.Entity("MeManga.Core.Entities.BookInWriter", b =>
                {
                    b.Property<Guid>("BookId");

                    b.Property<Guid>("WriterId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<Guid>("Id");

                    b.Property<bool>("RecordActive");

                    b.Property<bool>("RecordDeleted");

                    b.Property<int>("RecordOrder");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("BookId", "WriterId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("WriterId");

                    b.ToTable("BookInWriter");
                });

            modelBuilder.Entity("MeManga.Core.Entities.Chapter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BookId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("Name");

                    b.Property<bool>("RecordActive");

                    b.Property<bool>("RecordDeleted");

                    b.Property<int>("RecordOrder");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<int>("View");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Chapter");
                });

            modelBuilder.Entity("MeManga.Core.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BookId");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("RecordActive");

                    b.Property<bool>("RecordDeleted");

                    b.Property<int>("RecordOrder");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("MeManga.Core.Entities.FilePath", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ChapterId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<int>("PageNumber");

                    b.Property<string>("Path");

                    b.Property<bool>("RecordActive");

                    b.Property<bool>("RecordDeleted");

                    b.Property<int>("RecordOrder");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("FilePath");
                });

            modelBuilder.Entity("MeManga.Core.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<bool>("RecordActive");

                    b.Property<bool>("RecordDeleted");

                    b.Property<int>("RecordOrder");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("MeManga.Core.Entities.TypeBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Count");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("Name");

                    b.Property<bool>("RecordActive");

                    b.Property<bool>("RecordDeleted");

                    b.Property<int>("RecordOrder");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("TypeBook");
                });

            modelBuilder.Entity("MeManga.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<string>("AvatarUrl");

                    b.Property<DateTime?>("Birthday");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("Email")
                        .HasMaxLength(255);

                    b.Property<int>("Gender");

                    b.Property<string>("Google")
                        .HasMaxLength(512);

                    b.Property<string>("Mobile");

                    b.Property<string>("Name")
                        .HasMaxLength(512);

                    b.Property<string>("Password")
                        .HasMaxLength(512);

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(512);

                    b.Property<bool>("RecordActive");

                    b.Property<bool>("RecordDeleted");

                    b.Property<int>("RecordOrder");

                    b.Property<Guid>("RoleId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MeManga.Core.Entities.UserCollectionBook", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("BookId");

                    b.Property<Guid?>("BookId1");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("Favorite");

                    b.Property<Guid>("Id");

                    b.Property<int>("Rating");

                    b.Property<bool>("RecordActive");

                    b.Property<bool>("RecordDeleted");

                    b.Property<int>("RecordOrder");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("UserId", "BookId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("BookId1");

                    b.ToTable("UserCollectionBook");
                });

            modelBuilder.Entity("MeManga.Core.Entities.Writer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("Information");

                    b.Property<string>("Name");

                    b.Property<bool>("RecordActive");

                    b.Property<bool>("RecordDeleted");

                    b.Property<int>("RecordOrder");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Writer");
                });

            modelBuilder.Entity("MeManga.Core.Entities.Book", b =>
                {
                    b.HasOne("MeManga.Core.Entities.User", "Translator")
                        .WithMany("BookTranslates")
                        .HasForeignKey("TranslatorId");

                    b.HasOne("MeManga.Core.Entities.Writer", "Writer")
                        .WithMany()
                        .HasForeignKey("WriterId");
                });

            modelBuilder.Entity("MeManga.Core.Entities.BookInType", b =>
                {
                    b.HasOne("MeManga.Core.Entities.Book", "Book")
                        .WithMany("BookInTypes")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MeManga.Core.Entities.TypeBook", "TypeBook")
                        .WithMany("BookInTypes")
                        .HasForeignKey("TypeBookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MeManga.Core.Entities.User")
                        .WithMany("BookInTypes")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MeManga.Core.Entities.BookInWriter", b =>
                {
                    b.HasOne("MeManga.Core.Entities.Book", "Book")
                        .WithMany("BookInWriters")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MeManga.Core.Entities.Writer", "Writer")
                        .WithMany("BookInWriters")
                        .HasForeignKey("WriterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeManga.Core.Entities.Chapter", b =>
                {
                    b.HasOne("MeManga.Core.Entities.Book", "Book")
                        .WithMany("Chapters")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeManga.Core.Entities.Comment", b =>
                {
                    b.HasOne("MeManga.Core.Entities.Book", "Book")
                        .WithMany("Comments")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MeManga.Core.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MeManga.Core.Entities.FilePath", b =>
                {
                    b.HasOne("MeManga.Core.Entities.Chapter", "Chapter")
                        .WithMany("PathImages")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeManga.Core.Entities.User", b =>
                {
                    b.HasOne("MeManga.Core.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeManga.Core.Entities.UserCollectionBook", b =>
                {
                    b.HasOne("MeManga.Core.Entities.Book", "Book")
                        .WithMany("UserCollectionBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MeManga.Core.Entities.Book")
                        .WithMany("Ratings")
                        .HasForeignKey("BookId1");

                    b.HasOne("MeManga.Core.Entities.User", "User")
                        .WithMany("UserCollectionBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
